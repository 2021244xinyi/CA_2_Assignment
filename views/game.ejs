<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/styles.css" />
    <title>Login</title>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      socket.on("game", (game) => {
        const mePlayerId = JSON.parse(`<%- JSON.stringify(player) %>`)._id;
        const player0MonsterCount = game.grid
          .flat()
          .filter(
            (cell) =>
              cell.monster && cell.monster.player === game.players[0]._id
          ).length;
        const player1MonsterCount = game.grid
          .flat()
          .filter(
            (cell) =>
              cell.monster && cell.monster.player === game.players[1]._id
          ).length;

        const resultBg = document.querySelector("#resultBg");
        const resultDiv = document.querySelector("#resultDiv");

        if (player0MonsterCount === 0 || player1MonsterCount === 0) {
          if (player0MonsterCount === 0 && player1MonsterCount === 0) {
            resultBg.style.display = "block";
            resultDiv.style.display = "flex";
            resultDiv.innerHTML = `<h4 style="color: #ccc; padding: 1rem">Draw!</h4><a href="/game" class="button1">Play again</a>`;
          } else if (
            player0MonsterCount === 0 &&
            game.players[0]._id === mePlayerId
          ) {
            resultBg.style.display = "block";
            resultDiv.style.display = "flex";
            resultDiv.innerHTML = `<h4 style="color: red; padding: 1rem">Alas! You lost</h4><a href="/game" class="button1">Play again</a>`;
          } else if (
            player1MonsterCount === 0 &&
            game.players[1]._id === mePlayerId
          ) {
            resultBg.style.display = "block";
            resultDiv.style.display = "flex";
            resultDiv.innerHTML = `<h4 style="color: red; padding: 1rem">Alas! You Lost</h4><a href="/game" class="button1">Play again</a>`;
          } else if (
            player0MonsterCount === 0 &&
            game.players[1]._id === mePlayerId
          ) {
            resultBg.style.display = "block";
            resultDiv.style.display = "flex";
            resultDiv.innerHTML = `<h4 style="color: green; padding: 1rem">Hurray! You won</h4><a href="/game" class="button1">Play again</a>`;
          } else if (
            player1MonsterCount === 0 &&
            game.players[0]._id === mePlayerId
          ) {
            resultBg.style.display = "block";
            resultDiv.style.display = "flex";
            resultDiv.innerHTML = `<h4 style="color: green; padding: 1rem">Hurray! You won</h4><a href="/game" class="button1">Play again</a>`;
          }
          socket.emit("result", {
            gameId: game._id,
            players: game.players.map((player) => player._id),
            winner:
              player0MonsterCount === 0 && player1MonsterCount === 0
                ? null
                : player0MonsterCount === 0
                ? game.players[1]._id
                : game.players[0]._id,
          });
        }

        const playersList = document.querySelector("#playersList");
        playersList.innerHTML = `
        <h3 style="width: 100%; color: white; background: #000; padding: .3rem .8rem; ${
          game.turn === game.players[0]._id
            ? "border: 4px solid red;"
            : "border: none"
        }">${game.players[0].name}
        </h3>
        <h3 style="width: 100%; color: white; background: #aaa; padding: .3rem .8rem; ${
          game.turn === game.players[1]._id
            ? "border: 4px solid red;"
            : "border: none"
        }
        ">${game.players[1].name}
        </h3>
      `;

        const cells = document.querySelectorAll(".cell");
        const gameGrid = game.grid;
        cells.forEach((cell, index) => {
          cell.addEventListener("click", handleCellClick);
          const x = Math.floor(index / 10);
          const y = index % 10;
          cell.style.backgroundColor = gameGrid[x][y].monster
            ? gameGrid[x][y].monster.player === game.players[0]._id
              ? "#000"
              : "#aaa"
            : "white";
          cell.style.color = "white";
          cell.innerHTML = gameGrid[x][y].monster
            ? `<p>${gameGrid[x][y].monster.type[0].toUpperCase()}</p>`
            : "";
        });

        // Function to handle cell click
        function handleCellClick(event) {
          const mePlayerId = JSON.parse(`<%- JSON.stringify(player) %>`)._id;
          if (game.turn !== mePlayerId) return;
          const otherPlayerId = game.players.find(
            (player) => player._id !== mePlayerId
          )._id;
          const cell = event.currentTarget;
          const x = Number(cell.dataset.x);
          const y = Number(cell.dataset.y);
          const cells = document.querySelectorAll(".cell");
          const selectedCell = Array.from(cells).find(
            (cell) => cell.dataset.selected === "true"
          );
          if (
            selectedCell &&
            getPathCells(
              game,
              Number(selectedCell.dataset.x),
              Number(selectedCell.dataset.y),
              mePlayerId,
              otherPlayerId
            ).includes(cell)
          ) {
            const fromMonster =
              game.grid[Number(selectedCell.dataset.x)][
                Number(selectedCell.dataset.y)
              ].monster;
            const toMonster = game.grid[x][y].monster;
            if (!toMonster) {
              game.grid[x][y].monster = fromMonster;
              game.grid[Number(selectedCell.dataset.x)][
                Number(selectedCell.dataset.y)
              ].monster = null;
            } else {
              if (
                (fromMonster.type === "vampire" &&
                  toMonster.type === "werewolf") ||
                (fromMonster.type === "werewolf" &&
                  toMonster.type === "vampire")
              ) {
                game.grid[x][y].monster = [fromMonster, toMonster].find(
                  (monster) => monster.type === "vampire"
                );
                game.grid[Number(selectedCell.dataset.x)][
                  Number(selectedCell.dataset.y)
                ].monster = null;
              } else if (
                (fromMonster.type === "werewolf" &&
                  toMonster.type === "ghost") ||
                (fromMonster.type === "ghost" && toMonster.type === "werewolf")
              ) {
                game.grid[x][y].monster = [fromMonster, toMonster].find(
                  (monster) => monster.type === "werewolf"
                );
                game.grid[Number(selectedCell.dataset.x)][
                  Number(selectedCell.dataset.y)
                ].monster = null;
              } else if (
                (fromMonster.type === "ghost" &&
                  toMonster.type === "vampire") ||
                (fromMonster.type === "vampire" && toMonster.type === "ghost")
              ) {
                game.grid[x][y].monster = [fromMonster, toMonster].find(
                  (monster) => monster.type === "ghost"
                );
                game.grid[Number(selectedCell.dataset.x)][
                  Number(selectedCell.dataset.y)
                ].monster = null;
              } else if (fromMonster.type === toMonster.type) {
                game.grid[x][y].monster = null;
                game.grid[Number(selectedCell.dataset.x)][
                  Number(selectedCell.dataset.y)
                ].monster = null;
              }
            }

            game.turn = otherPlayerId;

            socket.emit("game", {
              gameId: game._id,
              game,
            });
            hidePath();
          } else {
            showPath(game, x, y, mePlayerId, otherPlayerId, event);
          }
        }

        renderGridOrWaitingMessage();
      });

      // Function to show path where monster can move
      function showPath(game, x, y, mePlayerId, otherPlayerId, event) {
        hidePath();
        if (!game.grid[x][y].monster) return;
        if (game.grid[x][y].monster.player !== mePlayerId) return;
        event.currentTarget.dataset.selected = "true";
        const pathCells = getPathCells(game, x, y, mePlayerId, otherPlayerId);
        pathCells.forEach((pathCell) => {
          pathCell.style.border = "3px solid red";
        });
      }
      function hidePath() {
        const cells = document.querySelectorAll(".cell");
        cells.forEach((cell) => {
          cell.style.border = "1px solid black";
          cell.dataset.selected = "false";
        });
      }

      // Function to get path cells
      function getPathCells(game, x, y, mePlayerId, otherPlayerId) {
        const cells = document.querySelectorAll(".cell");
        let pathCells = [];
        for (let i = x + 1; i < 10; i++) {
          if (game.grid[i][y].monster) {
            if (game.grid[i][y].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[i][y].monster.player === otherPlayerId) {
              pathCells.push(cells[i * 10 + y]);
              break;
            }
          } else {
            pathCells.push(cells[i * 10 + y]);
          }
        }
        for (let i = x - 1; i >= 0; i--) {
          if (game.grid[i][y].monster) {
            if (game.grid[i][y].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[i][y].monster.player === otherPlayerId) {
              pathCells.push(cells[i * 10 + y]);
              break;
            }
          } else {
            pathCells.push(cells[i * 10 + y]);
          }
        }
        for (let i = y + 1; i < 10; i++) {
          if (game.grid[x][i].monster) {
            if (game.grid[x][i].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[x][i].monster.player === otherPlayerId) {
              pathCells.push(cells[x * 10 + i]);
              break;
            }
          } else {
            pathCells.push(cells[x * 10 + i]);
          }
        }
        for (let i = y - 1; i >= 0; i--) {
          if (game.grid[x][i].monster) {
            if (game.grid[x][i].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[x][i].monster.player === otherPlayerId) {
              pathCells.push(cells[x * 10 + i]);
              break;
            }
          } else {
            pathCells.push(cells[x * 10 + i]);
          }
        }
        for (let i = x + 1, j = y + 1; i < x + 3 && j < y + 3; i++, j++) {
          if (i >= 10 || j >= 10) break;
          if (game.grid[i][j].monster) {
            if (game.grid[i][j].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[i][j].monster.player === otherPlayerId) {
              pathCells.push(cells[i * 10 + j]);
              break;
            }
          } else {
            pathCells.push(cells[i * 10 + j]);
          }
        }
        for (let i = x - 1, j = y - 1; i > x - 3 && j > y - 3; i--, j--) {
          if (i < 0 || j < 0) break;
          if (game.grid[i][j].monster) {
            if (game.grid[i][j].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[i][j].monster.player === otherPlayerId) {
              pathCells.push(cells[i * 10 + j]);
              break;
            }
          } else {
            pathCells.push(cells[i * 10 + j]);
          }
        }
        for (let i = x + 1, j = y - 1; i < x + 3 && j > y - 3; i++, j--) {
          if (i >= 10 || j < 0) break;
          if (game.grid[i][j].monster) {
            if (game.grid[i][j].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[i][j].monster.player === otherPlayerId) {
              pathCells.push(cells[i * 10 + j]);
              break;
            }
          } else {
            pathCells.push(cells[i * 10 + j]);
          }
        }
        for (let i = x - 1, j = y + 1; i > x - 3 && j < y + 3; i--, j++) {
          if (i < 0 || j >= 10) break;
          if (game.grid[i][j].monster) {
            if (game.grid[i][j].monster.player === mePlayerId) {
              continue;
            } else if (game.grid[i][j].monster.player === otherPlayerId) {
              pathCells.push(cells[i * 10 + j]);
              break;
            }
          } else {
            pathCells.push(cells[i * 10 + j]);
          }
        }
        return pathCells;
      }

      document.addEventListener("DOMContentLoaded", () => {
        const leaderboardDiv = document.querySelector("#leaderboardDiv");
        const leaderboard = JSON.parse(`<%- JSON.stringify(leaderboard) %>`);
        leaderboardDiv.innerHTML = leaderboard
          .map(
            (player, index) =>
              `<div style="color: white; background: #000; padding: 5px 10px; margin: .5rem 0; display: flex; align-items:center; gap: 15px; justify-content: space-between">
                <h5 style="margin: 0">${player.name}</h5>
                <h2 style="margin: 0">${player.wins}</h2>
              </div>`
          )
          .join("");

        const grid = document.querySelector("#grid");
        const game = JSON.parse(`<%- JSON.stringify(game) %>`);
        game.grid.forEach((row, x) => {
          row.forEach((cell, y) => {
            const cellElement = document.createElement("div");
            cellElement.classList.add("cell");
            cellElement.dataset.x = x;
            cellElement.dataset.y = y;
            grid.appendChild(cellElement);
          });
        });

        socket.emit("joinGame", { gameId: game._id });
        if (game.players.length === 2) {
          socket.emit("game", {
            gameId: game._id,
            game: JSON.parse(`<%- JSON.stringify(game) %>`),
          });
        }
      });

      function renderGridOrWaitingMessage() {
        const gridContainer = document.querySelector("#grid");
        const waitingMessage = document.querySelector("#waiting-message");
        gridContainer.style.display = "grid";
        waitingMessage.style.display = "none";
      }
    </script>
  </head>
  <body>
    <header>
      <a href="/game">Play game</a>
      <a href="/logout">Logout</a>
      <a href="/profile">Profile</a>
    </header>    
    <div class="container">
      <div id="playersList"></div>
      <h3 id="waiting-message" style="display: block">
        Waiting for a player to join...
      </h3>
      <div class="containerInner">
        <div id="grid" style="display: none"></div>
        <div>
          <h3>Leaderboard</h3>
          <div id="leaderboardDiv"></div>
        </div>
      </div>
      <div id="resultBg"></div>
      <div id="resultDiv"></div>
    </div>
  </body>
</html>
